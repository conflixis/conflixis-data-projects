services:
  api:
    container_name: api
    restart: always
    build:
      context: .
      dockerfile: ./packages/api/dev.Dockerfile
      target: development
    environment:
      - PORT=5051
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    ports:
      - "5051:5051"
    env_file: ./packages/api/.env
    volumes:
      - ./packages/api:/workspace/packages/api
      - ./packages/core:/workspace/packages/core
      - ./tsconfig.base.json:/app/tsconfig.base.json:ro
      - turbo-cache:/workspace/node_modules/.cache/turbo
    networks:
      - apinetwork
    working_dir: /workspace/packages/api
    command: npm run dev

  portal:
    container_name: portal
    build:
      context: .
      dockerfile: ./packages/portal/Dockerfile
      target: development
    env_file:
      - ./packages/portal/.env.local
    ports:
      - "4000:3000"
    volumes:
      - .:/workspace
      - ./packages/portal:/app/packages/portal
      - ./packages/ui:/app/packages/ui
      - ./packages/core:/app/packages/core
      - ./tsconfig.base.json:/app/tsconfig.base.json:ro
      - turbo-cache:/workspace/node_modules/.cache/turbo
    networks:
      - apinetwork
    command: npm run dev

  client:
    container_name: client
    build:
      context: .
      dockerfile: ./packages/client/Dockerfile
    ports:
      - "3000:3000"
    env_file: ./packages/client/.env.local
    volumes:
      - ./packages/client:/app/packages/client
      - ./packages/ui:/app/packages/ui
      - ./packages/core:/app/packages/core
      - ./tsconfig.base.json:/app/tsconfig.base.json:ro
      - turbo-cache:/workspace/node_modules/.cache/turbo
    environment:
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
      - BUILD_ENVIRONMENT=dev_local
    networks:
      - apinetwork
    command: npm run dev

  manager:
    container_name: manager
    build:
      context: .
      dockerfile: ./packages/manager/Dockerfile
    ports:
      - "3300:3000"
    env_file: ./packages/manager/.env.local
    volumes:
      - ./packages/manager:/app/packages/manager
      - ./packages/ui:/app/packages/ui
      - ./packages/core:/app/packages/core
      - ./tsconfig.base.json:/app/tsconfig.base.json:ro
      - turbo-cache:/workspace/node_modules/.cache/turbo
    environment:
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
      - BUILD_ENVIRONMENT=dev_local
    networks:
      - apinetwork
    command: npm run dev

  core_db:
    build:
      context: ./infra/core_db
      dockerfile: Dockerfile
    container_name: core_db
    restart: always
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: devdb
    ports:
      - "5432:5432"
    volumes:
      - core-postgres-data:/var/lib/postgresql/data
    networks:
      - apinetwork

  reference_db:
    build:
      context: ./infra/reference_db
      dockerfile: Dockerfile
    container_name: reference_db
    restart: always
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: devdb
    ports:
      - "5433:5432"
    volumes:
      - reference-postgres-data:/var/lib/postgresql/data
    networks:
      - apinetwork

  postgrest:
    build:
      context: ./packages/postgrest
      dockerfile: Dockerfile
    container_name: postgrest
    restart: always
    ports:
      - "5052:5052"
    depends_on:
      - core_db
    networks:
      - apinetwork
    environment:
      PGRST_DB_URI: postgres://devuser:devpass@core_db:5432/devdb
      PGRST_DB_ANON_ROLE: devuser
      PGRST_SERVER_PORT: 5052
      # JWT authentication is disabled for development
      # When PGRST_JWT_SECRET is not set, PostgREST allows anonymous access
      # using the role specified in PGRST_DB_ANON_ROLE (devuser)
      # 
      # To enable JWT authentication, uncomment the line below:
      # PGRST_JWT_SECRET: dev-secret-key-do-not-use-in-production-replace-with-secure-key

volumes:
  turbo-cache:
    driver: local
  core-postgres-data:
  reference-postgres-data:

networks:
  apinetwork:
